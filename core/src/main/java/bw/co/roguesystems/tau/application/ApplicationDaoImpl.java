// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.tau.application;

import bw.co.roguesystems.tau.access.AccessPointRepository;
import org.springframework.stereotype.Repository;

/**
 * @see Application
 */
@Repository("applicationDao")
public class ApplicationDaoImpl
    extends ApplicationDaoBase
{
    
    public ApplicationDaoImpl(
        AccessPointRepository accessPointRepository,
        ApplicationRepository applicationRepository
    ) {

        super(
            accessPointRepository,
            applicationRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toApplicationDTO(
        Application source,
        ApplicationDTO target)
    {
        // TODO verify behavior of toApplicationDTO
        super.toApplicationDTO(source, target);
        // WARNING! No conversion for target.accessPoints (can't convert source.getAccessPoints():bw.co.roguesystems.tau.access.AccessPoint to bw.co.roguesystems.tau.access.AccessPointDTO
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ApplicationDTO toApplicationDTO(final Application entity)
    {
        // TODO verify behavior of toApplicationDTO
        return super.toApplicationDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Application loadApplicationFromApplicationDTO(ApplicationDTO applicationDTO)
    {
        if (applicationDTO.getId() == null)
        {
            return  Application.Factory.newInstance();
        }
        else
        {
            return this.load(applicationDTO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Application applicationDTOToEntity(ApplicationDTO applicationDTO)
    {
        // TODO verify behavior of applicationDTOToEntity
        Application entity = this.loadApplicationFromApplicationDTO(applicationDTO);
        this.applicationDTOToEntity(applicationDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void applicationDTOToEntity(
        ApplicationDTO source,
        Application target,
        boolean copyIfNull)
    {
        // TODO verify behavior of applicationDTOToEntity
        super.applicationDTOToEntity(source, target, copyIfNull);
    }
}