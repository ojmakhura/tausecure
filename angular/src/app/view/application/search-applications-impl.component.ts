// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, effect, inject } from '@angular/core';
import { SearchApplicationsComponent } from '@app/view/application/search-applications.component';
import { SearchApplicationsVarsForm } from '@app/view/application/search-applications.component';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import { MaterialModule } from '@app/material.module';
import { TableComponent } from '@app/components/table/table.component';
import { LoaderComponent } from "@shared/loader/loader.component";
import { SearchObject } from '@app/model/search-object';
import { MatPaginator } from '@angular/material/paginator';
import { UrlTree } from '@angular/router';
import { AuthorisationApiStore } from '@app/store/bw/co/roguesystems/tau/authorisation/authorisation-api.store';
import { AppEnvStore } from '@app/store/app-env.state';

@Component({
  selector: 'app-search-applications',
  templateUrl: './search-applications.component.html',
  styleUrls: ['./search-applications.component.scss'],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    MaterialModule,
    TableComponent,
    LoaderComponent,
  ],
})
export class SearchApplicationsImplComponent extends SearchApplicationsComponent {

  readonly authorisationApiStore = inject(AuthorisationApiStore);
  readonly appStore = inject(AppEnvStore);

    constructor() {
        super();
        this.applicationsTableSignal = this.applicationApiStore.dataPage;

    }

    override beforeOnInit(form: SearchApplicationsVarsForm): SearchApplicationsVarsForm{
        return form;
    }

    override doNgAfterViewInit(): void {
      this.applicationsTable?.tablePaginator?.page?.subscribe({
        next: (paginator: MatPaginator) => {
          this.doSearch(paginator.pageIndex, paginator.pageSize);
        },
      });
      const tree: UrlTree = this.router.parseUrl(this.router.url);
      let cleanUrl = tree.root.children['primary']?.segments.map((it) => it.path).join('/') || '';

      this.authorisationApiStore.findRestrictedViewItems({
        url: encodeURIComponent(`/${cleanUrl}{`),
        roles: this.appStore.realmRoles().map((role) => role.value),
      });

      this.doSearch();
    }

    doNgOnDestroy(): void {
    }

    override beforeSearchApplicationsSearch(form: any): void {
      console.log('beforeSearchApplicationsSearch', form);
      this.doSearch();
    }

    private doSearch(pageNumber: number = 0, pageSize: number = 10): void {
      let criteria = new SearchObject<string>();
      criteria.criteria = this.criteriaControl.value;

      criteria.pageNumber = pageNumber;
      criteria.pageSize = pageSize;

      this.applicationApiStore.pagedSearch({ criteria: criteria });
    }
}
