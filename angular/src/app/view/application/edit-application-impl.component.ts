// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, effect, inject } from '@angular/core';
import { EditApplicationComponent } from '@app/view/application/edit-application.component';
import { EditApplicationVarsForm } from '@app/view/application/edit-application.component';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import { MaterialModule } from '@app/material.module';
import { LoaderComponent } from "@shared/loader/loader.component";
import { AuthorisationApiStore } from '@app/store/bw/co/roguesystems/tau/authorisation/authorisation-api.store';
import { AppEnvStore } from '@app/store/app-env.state';
import { UrlTree } from '@angular/router';

@Component({
  selector: 'app-edit-application',
  templateUrl: './edit-application.component.html',
  styleUrls: ['./edit-application.component.scss'],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    MaterialModule,
    LoaderComponent,
  ],
})
export class EditApplicationImplComponent extends EditApplicationComponent {

  readonly authorisationApiStore = inject(AuthorisationApiStore);
  readonly appStore = inject(AppEnvStore);

  constructor() {
    super();

    this.loading = this.applicationApiStore.loading;
    this.success = this.applicationApiStore.success;
    this.error = this.applicationApiStore.error;
    this.loaderMessage = this.applicationApiStore.loaderMessage;
    this.messages = this.applicationApiStore.messages;

    effect(() => {
      let application = this.applicationApiStore.data();
      this.editApplicationForm.patchValue(application);
    });

    this.applicationApiStore.reset();
  }

  override doNgAfterViewInit(): void {
    this.applicationApiStore.reset();
  }

  override beforeOnInit(form: EditApplicationVarsForm): EditApplicationVarsForm {
    this.route.queryParams.subscribe((params: any) => {
      if (params.id) {
        this.applicationApiStore.findById(params);
      }
    });

    const tree: UrlTree = this.router.parseUrl(this.router.url);
    let cleanUrl = tree.root.children['primary']?.segments.map((it) => it.path).join('/') || '';

    this.authorisationApiStore.findRestrictedViewItems({
      url: encodeURIComponent(`/${cleanUrl}{`),
      roles: this.appStore.realmRoles().map((role) => role.value),
    });
    return form;
  }

  doNgOnDestroy(): void {
  }

  override beforeEditApplicationSave(form: EditApplicationVarsForm): void {

    this.toasterAction = true;
    this.applicationApiStore.save({
      application: this.editApplicationForm.value,
    });
  }
}
